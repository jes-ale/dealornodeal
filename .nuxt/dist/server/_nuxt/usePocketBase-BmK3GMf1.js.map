{"version":3,"file":"usePocketBase-BmK3GMf1.js","sources":["../../../../composables/usePocketBase.ts"],"sourcesContent":["import { ref } from 'vue'\nimport PocketBase from 'pocketbase'\nimport { EventBus } from '~/event-bus.ts';\n\n\nconst pb = new PocketBase('https://db.alejos.dev')\n\nconst isLoggedIn = ref(false)\nconst user = ref<any>(null)\n\nexport const usePocketBase = () => {\n  const start = async () => {\n\n    if (process.client) {\n      function getCookie(name: any) {\n        const value = `; ${document.cookie}`;\n        const parts: any = value.split(`; ${name}=`);\n        if (parts.length === 2) return parts.pop().split(';').shift();\n      }\n\n      function setCookie(name: any, value: any, days: any) {\n        const expires = new Date(Date.now() + days * 864e5).toUTCString();\n        const secure = window.location.protocol === 'https:' ? 'Secure;' : '';\n        const sameSite = 'SameSite=Lax;'; // Adjust SameSite attribute as needed\n        document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires}; path=/; ${secure} ${sameSite}`;\n      }\n\n      function deleteCookie(name: any) {\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n      }\n\n      const storedAuth = getCookie('pb_auth');\n\n      if (storedAuth) {\n        EventBus.emit('loading', { show: true });\n        try {\n          const authData = JSON.parse(decodeURIComponent(storedAuth));\n          pb.authStore.loadFromCookie(authData);\n          if (pb.authStore.isValid) {\n            isLoggedIn.value = true\n            await pb.collection('internal_users').authRefresh();\n            user.value = pb.authStore.model\n          }\n        } catch (e) {\n          console.error('Failed to parse storedAuth:', e);\n        } finally {\n          EventBus.emit('loading', { show: false });\n        }\n      }\n      pb.authStore.onChange(() => {\n        const authData = JSON.stringify(pb.authStore.exportToCookie());\n        setCookie('pb_auth', authData, 7);\n      });\n    }\n  }\n  const login = async (email: string, password: string) => {\n    try {\n      const authData = await pb.collection('internal_users').authWithPassword(email, password)\n      isLoggedIn.value = true\n      user.value = authData.record\n    } catch (error) {\n      isLoggedIn.value = false\n      user.value = null\n      throw error\n    }\n  }\n\n  const logout = async () => {\n    pb.authStore.clear()\n    isLoggedIn.value = false\n    user.value = null\n  }\n\n  return {\n    isLoggedIn,\n    user,\n    login,\n    logout,\n    pb,\n    start\n  }\n}\n\n"],"names":[],"mappings":";;;AAKA,MAAM,KAAK,IAAI,WAAW,uBAAuB;AAEjD,MAAM,aAAa,IAAI,KAAK;AAC5B,MAAM,OAAO,IAAS,IAAI;AAEnB,MAAM,gBAAgB,MAAM;AACjC,QAAM,QAAQ,YAAY;AAAA,EA0CxB;AAEI,QAAA,QAAQ,OAAO,OAAe,aAAqB;AACnD,QAAA;AACI,YAAA,WAAW,MAAM,GAAG,WAAW,gBAAgB,EAAE,iBAAiB,OAAO,QAAQ;AACvF,iBAAW,QAAQ;AACnB,WAAK,QAAQ,SAAS;AAAA,aACf,OAAO;AACd,iBAAW,QAAQ;AACnB,WAAK,QAAQ;AACP,YAAA;AAAA,IACR;AAAA,EAAA;AAGF,QAAM,SAAS,YAAY;AACzB,OAAG,UAAU;AACb,eAAW,QAAQ;AACnB,SAAK,QAAQ;AAAA,EAAA;AAGR,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;"}