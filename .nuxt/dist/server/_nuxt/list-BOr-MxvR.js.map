{"version":3,"file":"list-BOr-MxvR.js","sources":["../../../../components/Views/ListView.vue","../../../../pages/user/list.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, computed, onMounted, defineProps } from 'vue';\nimport { usePocketBase } from '~/composables/usePocketBase';\nimport { EventBus } from '~/event-bus.ts';\nimport { useRouter } from 'vue-router';\nimport { Icon } from '@iconify/vue';\n\nconst props = defineProps({\n  collection: {\n    type: String,\n    required: true,\n  },\n  fields: {\n    type: Array,\n    required: true,\n  },\n});\n\nconst { pb } = usePocketBase();\nconst search = ref('');\nconst items = ref([]);\nconst filters = ref([]);\nconst router = useRouter();\n\nconst fetchItems = async () => {\n  EventBus.emit('loading', { show: true });\n  try {\n    const query = buildQuery();\n    const records = await pb.collection(props.collection).getFullList({ filter: query });\n    items.value = records;\n  } catch (error) {\n    console.error('Error fetching items:', error);\n  } finally {\n    EventBus.emit('loading', { show: false });\n  }\n};\n\nconst buildQuery = () => {\n  const queryParts = [];\n\n  if (search.value) {\n    queryParts.push(\n      visibleFields.value.map(field =>\n        `${field.field_name} ~ \"${search.value}\"`\n      ).join(' || ')\n    );\n  }\n\n  filters.value.forEach(filter => {\n    if (filter.field && filter.condition && filter.value) {\n      switch (filter.condition) {\n        case 'equals':\n          queryParts.push(`${filter.field} = \"${filter.value}\"`);\n          break;\n        case 'contains':\n          queryParts.push(`${filter.field} ~ \"${filter.value}\"`);\n          break;\n        case 'starts_with':\n          queryParts.push(`${filter.field} ~ \"^${filter.value}\"`);\n          break;\n        case 'ends_with':\n          queryParts.push(`${filter.field} ~ \"${filter.value}$\"`);\n          break;\n      }\n    }\n  });\n\n  return queryParts.length > 0 ? queryParts.join(' && ') : null;\n};\n\nconst addFilter = () => {\n  filters.value.push({ field: '', condition: 'equals', value: '' });\n};\n\nconst removeFilter = (index) => {\n  filters.value.splice(index, 1);\n};\n\nconst visibleFields = computed(() => props.fields.filter((field) => field.visible));\n\nconst route = useRoute();\n\nconst navigateToUpdate = (id: string) => {\n  const currentPath = route.path.split('/')[1]; // Get the first part of the URL path\n  router.push(`/${currentPath}/form/${id}`);\n};\n\nonMounted(fetchItems);\n</script>\n\n<template>\n  <div class=\"flex w-full h-full justify-start items-center flex-col\">\n    <div class=\"flex justify-start items-center w-full\">\n      <input type=\"text\" v-model=\"search\" @input=\"fetchItems\" placeholder=\"Search...\"\n        class=\"border-x border-black p-2 bg-rose-100 w-full\" />\n      <button @click=\"addFilter\" class=\" p-2 h-full w-auto\">\n        <Icon icon=\"fluent:filter-add-20-filled\" />\n      </button>\n      <button @click=\"fetchItems\" class=\"border-x border-black p-2 h-full w-auto\">\n        <Icon icon=\"carbon:query\" />\n      </button>\n    </div>\n    <div class=\"flex flex-col w-full\">\n      <div v-for=\"(filter, index) in filters\" :key=\"index\" class=\"flex border-t border-black w-full\">\n        <select v-model=\"filter.field\" class=\"border-r border-black p-2 bg-transparent w-full\">\n          <option disabled value=\"\">Select field</option>\n          <option v-for=\"field in fields\" :key=\"field.id\" :value=\"field.field_name\">{{ field.field_name }}</option>\n        </select>\n        <select v-model=\"filter.condition\" class=\"border-r border-black p-2 bg-transparent w-full\">\n          <option value=\"equals\">Equals</option>\n          <option value=\"contains\">Contains</option>\n          <option value=\"starts_with\">Starts with</option>\n          <option value=\"ends_with\">Ends with</option>\n        </select>\n        <input type=\"text\" v-model=\"filter.value\" class=\"border-r border-black p-2 bg-rose-100 w-full\" />\n        <button @click=\"removeFilter(index)\" class=\"p-2 w-full hover:bg-rose-100\">Remove</button>\n      </div>\n    </div>\n    <table class=\"min-w-full border-collapse\">\n      <thead>\n        <tr>\n          <th v-for=\"field in visibleFields\" :key=\"field.id\" class=\"border border-black p-2 bg-rose-100\">\n            {{ field.field_name.charAt(0).toUpperCase() + field.field_name.slice(1) }}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"item in items\" :key=\"item.id\" class=\"even:bg-rose-100\" @click=\"navigateToUpdate(item.id)\">\n          <td v-for=\"field in visibleFields\" :key=\"field.id\" class=\"border border-black p-2\">\n            {{ item[field.field_name] }}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n\n\n<style scoped>\n@import 'tailwindcss/tailwind.css';\n/* Add any additional styles */\n</style>\n","<script setup>\nimport ListView from '~/components/Views/ListView.vue';\nimport Header from '~/components/Blocks/Header.vue';\nimport { Icon } from '@iconify/vue'\nconst { t } = useI18n()\n\nconst collection = 'internal_users';\nconst fields = [\n  { field_name: 'username', visible: true, readonly: false, id: 'username' },\n  { field_name: 'verified', visible: true, readonly: false, id: 'verified' },\n  { field_name: 'email', visible: true, readonly: false, id: 'email' },\n  { field_name: 'created', visible: true, readonly: true, id: 'created' },\n  { field_name: 'updated', visible: true, readonly: true, id: 'updated' },\n  { field_name: 'avatar', visible: true, readonly: false, id: 'avatar' },\n  { field_name: 'roles', visible: true, readonly: false, id: 'roles' },\n  { field_name: 'contact_fk', visible: true, readonly: false, id: 'contact_fk' },\n  { field_name: 'company_id', visible: true, readonly: false, id: 'company_id' }\n];\n</script>\n<template>\n  <div>\n    <NuxtLayout name=\"default\">\n      <div class=\"w-full h-full flex items-center justify-center\">\n        <ListView :collection=\"collection\" :fields=\"fields\" />\n      </div>\n    </NuxtLayout>\n  </div>\n</template>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,UAAM,QAAQ;AAWC,kBAAc;AACvB,UAAA,SAAS,IAAI,EAAE;AACf,UAAA,QAAQ,IAAI,CAAA,CAAE;AACd,UAAA,UAAU,IAAI,CAAA,CAAE;AACP,cAAU;AAwDnB,UAAA,gBAAgB,SAAS,MAAM,MAAM,OAAO,OAAO,CAAC,UAAU,MAAM,OAAO,CAAC;AAEpE,aAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EvB,MAAM,aAAa;;;;;AAFL,YAAS;AAGvB,UAAM,SAAS;AAAA,MACb,EAAE,YAAY,YAAY,SAAS,MAAM,UAAU,OAAO,IAAI,WAAY;AAAA,MAC1E,EAAE,YAAY,YAAY,SAAS,MAAM,UAAU,OAAO,IAAI,WAAY;AAAA,MAC1E,EAAE,YAAY,SAAS,SAAS,MAAM,UAAU,OAAO,IAAI,QAAS;AAAA,MACpE,EAAE,YAAY,WAAW,SAAS,MAAM,UAAU,MAAM,IAAI,UAAW;AAAA,MACvE,EAAE,YAAY,WAAW,SAAS,MAAM,UAAU,MAAM,IAAI,UAAW;AAAA,MACvE,EAAE,YAAY,UAAU,SAAS,MAAM,UAAU,OAAO,IAAI,SAAU;AAAA,MACtE,EAAE,YAAY,SAAS,SAAS,MAAM,UAAU,OAAO,IAAI,QAAS;AAAA,MACpE,EAAE,YAAY,cAAc,SAAS,MAAM,UAAU,OAAO,IAAI,aAAc;AAAA,MAC9E,EAAE,YAAY,cAAc,SAAS,MAAM,UAAU,OAAO,IAAI,aAAc;AAAA,IAChF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}