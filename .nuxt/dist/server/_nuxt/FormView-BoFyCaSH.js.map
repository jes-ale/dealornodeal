{"version":3,"file":"FormView-BoFyCaSH.js","sources":["../../../../components/Fields/Many2ManyField.vue","../../../../components/Fields/Many2OneField.vue","../../../../components/Fields/One2ManyField.vue","../../../../components/Blocks/ActionButton.vue","../../../../components/Views/FormView.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted } from 'vue';\nimport { defineProps, defineEmits } from 'vue';\n\nconst { pb } = usePocketBase();\n\nconst props = defineProps({\n    label: String,\n    collection: String,\n    modelValue: Array,\n});\n\nconst emits = defineEmits(['update:modelValue']);\n\nconst items = ref([]);\nconst selectedItems = ref([...props.modelValue]);\n\nconst isSelected = (item) => selectedItems.value.some((selected) => selected.id === item.id);\n\nconst toggleSelection = (item) => {\n    if (isSelected(item)) {\n        selectedItems.value = selectedItems.value.filter((selected) => selected.id !== item.id);\n    } else {\n        selectedItems.value.push(item);\n    }\n    emits('update:modelValue', selectedItems.value);\n};\n\nonMounted(async () => {\n    const response = await pb.collection(props.collection).getFullList();\n    items.value = response;\n});\n</script>\n\n<template>\n    <div class=\" p-4 mb-4\">\n        <label class=\"block mb-2\">{{ label }}</label>\n        <div class=\"flex flex-wrap gap-2\">\n            <div v-for=\"item in items\" :key=\"item.id\" @click=\"toggleSelection(item)\" :class=\"{\n                'border border-black p-2 cursor-pointer': true,\n                'bg-blue-500 text-white': isSelected(item),\n                'bg-gray-100': !isSelected(item),\n            }\">\n                {{ item.name }}\n            </div>\n        </div>\n        <div class=\"mt-2 flex flex-wrap gap-2\">\n            <span v-for=\"item in selectedItems\" :key=\"item.id\" class=\"border border-black p-2 bg-blue-500 text-white\">\n                {{ item.name }}\n            </span>\n        </div>\n    </div>\n</template>\n\n\n<style scoped></style>\n","<script setup>\n\nconst { pb } = usePocketBase();\nconst props = defineProps({\n    label: String,\n    collection: String,\n    modelValue: [String, Number],\n});\n\nconst emits = defineEmits(['update:modelValue']);\n\nconst items = ref([]);\nconst selectedItem = ref(props.modelValue);\n\nonMounted(async () => {\n    const response = await pb.collection(props.collection).getFullList();\n    items.value = response;\n});\n\nwatch(selectedItem, (newValue) => {\n    emits('update:modelValue', newValue);\n});\n</script>\n\n<template>\n    <div class=\" p-4 mb-4\">\n        <label class=\"block mb-2\">{{ label }}</label>\n        <select v-model=\"selectedItem\" class=\"border border-black p-2 w-full\">\n            <option v-for=\"item in items\" :key=\"item.id\" :value=\"item.id\">\n                {{ item.name }}\n            </option>\n        </select>\n    </div>\n</template>\n\n<style scoped></style>\n","<script setup>\n\nconst { pb } = usePocketBase();\n\nconst props = defineProps({\n    label: String,\n    collection: String,\n    modelValue: Array,\n});\n\nconst emits = defineEmits(['update:modelValue']);\n\nconst items = ref([]);\nconst selectedItems = ref([...props.modelValue]);\n\nconst isSelected = (item) => selectedItems.value.some((selected) => selected.id === item.id);\n\nconst toggleSelection = (item) => {\n    if (isSelected(item)) {\n        selectedItems.value = selectedItems.value.filter((selected) => selected.id !== item.id);\n    } else {\n        selectedItems.value.push(item);\n    }\n    emits('update:modelValue', selectedItems.value);\n};\n\nonMounted(async () => {\n    const response = await pb.collection(props.collection).getFullList();\n    items.value = response;\n});\n</script>\n\n<template>\n    <div class=\"p-4 mb-4\">\n        <label class=\"block mb-2\">{{ label }}</label>\n        <div class=\"flex flex-wrap gap-2 border border-black \">\n            <div v-for=\"item in items\" :key=\"item.id\" @click=\"toggleSelection(item)\" :class=\"{\n                'border p-2 cursor-pointer': true,\n                'bg-blue-500 text-white': isSelected(item),\n                'bg-gray-100': !isSelected(item),\n            }\">\n                {{ item.name }}\n            </div>\n        </div>\n        <div class=\"mt-2 flex flex-wrap gap-2\">\n            <span v-for=\"item in selectedItems\" :key=\"item.id\" class=\"border p-2 bg-blue-500 text-white\">\n                {{ item.name }}\n            </span>\n        </div>\n    </div>\n</template>\n\n<style scoped></style>\n","<script setup lang=\"ts\">\nimport { defineProps } from 'vue'\nimport { Icon } from '@iconify/vue'\n\nconst props = defineProps({\n    type: {\n        type: String,\n        default: 'button'\n    },\n    icon: {\n        type: String,\n        required: true\n    },\n    label: {\n        type: String,\n        required: true\n    },\n    onClick: {\n        type: Function,\n        default: () => { }\n    }\n})\n\nconst buttonClass = `\n  w-16 h-16 flex flex-col items-center justify-center\n  border border-black p-2 bg-rose-700 text-white\n  hover:bg-rose-100 hover:text-rose-700 font-bold\n`\n</script>\n\n<template>\n    <button :type=\"type\" @click=\"onClick\" :class=\"buttonClass\">\n        <Icon :icon=\"icon\" class=\"w-full h-full\" />\n        <span>{{ label }}</span>\n    </button>\n</template>\n\n\n<style scoped>\n/* Additional styles if necessary */\n</style>\n","<script setup lang=\"ts\">\nimport { Disclosure, DisclosureButton, DisclosurePanel } from '@headlessui/vue'\nimport TextField from '~/components/Fields/TextField.vue'\nimport NumberField from '~/components/Fields/NumberField.vue'\nimport DatetimeField from '~/components/Fields/DatetimeField.vue'\nimport BooleanField from '~/components/Fields/BooleanField.vue'\nimport SelectionField from '~/components/Fields/SelectionField.vue'\nimport Many2ManyField from '~/components/Fields/Many2ManyField.vue'\nimport Many2OneField from '~/components/Fields/Many2OneField.vue'\nimport One2ManyField from '~/components/Fields/One2ManyField.vue'\nimport ActionButton from '~/components/Blocks/ActionButton.vue'\nimport { Icon } from '@iconify/vue'\n\nconst { pb } = usePocketBase()\n\nconst props = defineProps({\n  title: {\n    type: String,\n    default: 'Generic Form',\n  },\n  fields: {\n    type: Array,\n    required: true,\n  },\n  initialData: {\n    type: Object,\n    default: () => ({}),\n  },\n  collectionName: {\n    type: String,\n    required: true,\n  },\n  onSubmit: {\n    type: Function,\n    required: true,\n  },\n})\n\nconst formData = ref({})\n\nconst getFieldComponent = (type) => {\n  switch (type) {\n    case 'text':\n      return TextField\n    case 'number':\n      return NumberField\n    case 'date':\n      return DatetimeField\n    case 'boolean':\n      return BooleanField\n    case 'selection':\n      return SelectionField\n    case 'many2many':\n      return Many2ManyField\n    case 'many2one':\n      return Many2OneField\n    case 'one2many':\n      return One2ManyField\n    default:\n      return TextField\n  }\n}\n\nconst handleSubmit = async () => {\n  try {\n    let response\n    if (formData.value.id) {\n      response = await pb.collection(props.collectionName).update(formData.value.id, formData.value)\n    } else {\n      response = await pb.collection(props.collectionName).create(formData.value)\n    }\n    props.onSubmit(response)\n  } catch (error) {\n    console.error('Error submitting form:', error)\n  }\n}\n\nconst handleCancel = () => {\n  console.log('Cancel clicked')\n}\n\nconst handlePrint = () => {\n  console.log('Print clicked')\n}\n\nconst isOpen = ref(false)\nwatch(props, () => {\n  console.log('props.initialData', props.initialData)\n  formData.value = { ...props.initialData }\n});\n</script>\n\n<template>\n  <div class=\"relative flex w-full h-full justify-start items-center flex-col\">\n    <!-- Button area fixed at the top -->\n    <div class=\"left-0 top-0 w-full flex space-x-2 justify-end items-center bg-transparent p-4 z-10 \">\n      <h2 class=\"text-xl\">{{ title }}</h2>\n      <ActionButton type=\"submit\" icon=\"mdi:content-save\" label=\"Submit\" @click=\"handleSubmit\" />\n      <ActionButton type=\"button\" icon=\"mdi:file-undo\" label=\"Cancel\" @click=\"handleCancel\" />\n      <ActionButton type=\"button\" icon=\"mdi:printer\" label=\"Print\" @click=\"handlePrint\" />\n      <Disclosure v-slot=\"{ open }\">\n        <DisclosureButton\n          class=\"w-16 h-16 flex flex-col items-center justify-center border border-black p-2 bg-rose-700 text-white hover:bg-rose-100 hover:text-rose-700 font-bold\">\n          <Icon icon=\"mdi:eye\" class=\"w-full h-full\" v-if=\"open\" />\n          <Icon icon=\"mdi:eye-off\" class=\"w-full h-full\" v-else />\n          <span>{{ open ? 'Hide' : 'Show' }}</span>\n        </DisclosureButton>\n        <DisclosurePanel>\n          <div class=\"flex space-x-2 transition-transform duration-300 transform\"\n            :class=\"{ 'translate-x-0': open, 'translate-x-full': !open }\">\n            <slot name=\"buttons\" />\n          </div>\n        </DisclosurePanel>\n      </Disclosure>\n    </div>\n\n    <!-- Form content with padding to avoid overlap -->\n    <form @submit.prevent=\"handleSubmit\" class=\"p-4 mb-4 space-y-4 w-full overflow-auto\">\n      <component v-for=\"(field, index) in fields\" class=\"w-full\" :is=\"getFieldComponent(field.type)\" :key=\"index\"\n        v-model=\"formData[field.name]\" :label=\"field.label\" :options=\"field.options || []\" />\n    </form>\n  </div>\n</template>\n\n<style scoped>\n/* Add custom styles for fixed button area */\n.fixed {\n  position: fixed;\n}\n</style>\n\n\n<style scoped>\n/* Add custom styles for animation */\n.transition-transform {\n  transition: transform 0.3s ease-in-out;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIe,kBAAgB;AAE/B,UAAM,QAAQ;AAQd,UAAM,QAAQ,IAAI,CAAA,CAAE;AACpB,UAAM,gBAAgB,IAAI,CAAC,GAAG,MAAM,UAAU,CAAC;AAE/C,UAAM,aAAa,CAAC,SAAS,cAAc,MAAM,KAAK,CAAC,aAAa,SAAS,OAAO,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACf5E,kBAAgB;AAC/B,UAAM,QAAQ;AAMd,UAAM,QAAQ;AAEd,UAAM,QAAQ,IAAI,CAAA,CAAE;AACpB,UAAM,eAAe,IAAI,MAAM,UAAU;AAOzC,UAAM,cAAc,CAAC,aAAa;AAC9B,YAAM,qBAAqB,QAAQ;AAAA,IACvC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBc,kBAAgB;AAE/B,UAAM,QAAQ;AAQd,UAAM,QAAQ,IAAI,CAAA,CAAE;AACpB,UAAM,gBAAgB,IAAI,CAAC,GAAG,MAAM,UAAU,CAAC;AAE/C,UAAM,aAAa,CAAC,SAAS,cAAc,MAAM,KAAK,CAAC,aAAa,SAAS,OAAO,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;ACQ3F,MAAM,cAAc;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVd,UAAA,EAAE,OAAO;AAEf,UAAM,QAAQ;AAuBR,UAAA,WAAW,IAAI,CAAA,CAAE;AAEjB,UAAA,oBAAoB,CAAC,SAAS;AAClC,cAAQ,MAAM;AAAA,QACZ,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT,KAAK;AACI,iBAAA;AAAA,QACT;AACS,iBAAA;AAAA,MACX;AAAA,IAAA;AAGF,UAAM,eAAe,YAAY;AAC3B,UAAA;AACE,YAAA;AACA,YAAA,SAAS,MAAM,IAAI;AACV,qBAAA,MAAM,GAAG,WAAW,MAAM,cAAc,EAAE,OAAO,SAAS,MAAM,IAAI,SAAS,KAAK;AAAA,QAAA,OACxF;AACM,qBAAA,MAAM,GAAG,WAAW,MAAM,cAAc,EAAE,OAAO,SAAS,KAAK;AAAA,QAC5E;AACA,cAAM,SAAS,QAAQ;AAAA,eAChB,OAAO;AACN,gBAAA,MAAM,0BAA0B,KAAK;AAAA,MAC/C;AAAA,IAAA;AAGF,UAAM,eAAe,MAAM;AACzB,cAAQ,IAAI,gBAAgB;AAAA,IAAA;AAG9B,UAAM,cAAc,MAAM;AACxB,cAAQ,IAAI,eAAe;AAAA,IAAA;AAGd,QAAI,KAAK;AACxB,UAAM,OAAO,MAAM;AACT,cAAA,IAAI,qBAAqB,MAAM,WAAW;AAClD,eAAS,QAAQ,EAAE,GAAG,MAAM,YAAY;AAAA,IAAA,CACzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}