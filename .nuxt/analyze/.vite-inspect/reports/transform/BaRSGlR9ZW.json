{
  "resolvedId": "/home/jes/dealornodeal_web/node_modules/vue-i18n-routing/dist/vue-i18n-routing.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import VueRouter3, { isVueRouter4, createRouter as createRouter$1, useRouter, useRoute } from \"@intlify/vue-router-bridge\";\nimport { isRef, isVue2, effectScope, computed, isVue3, ref, watch, unref, watchEffect, onUnmounted } from \"vue-demi\";\nimport { useI18n } from \"@intlify/vue-i18n-bridge\";\nconst STRATEGIES = {\n  PREFIX: \"prefix\",\n  PREFIX_EXCEPT_DEFAULT: \"prefix_except_default\",\n  PREFIX_AND_DEFAULT: \"prefix_and_default\",\n  NO_PREFIX: \"no_prefix\"\n};\nconst DEFAULT_LOCALE = \"\";\nconst DEFAULT_STRATEGY = STRATEGIES.PREFIX_EXCEPT_DEFAULT;\nconst DEFAULT_TRAILING_SLASH = false;\nconst DEFAULT_ROUTES_NAME_SEPARATOR = \"___\";\nconst DEFAULT_LOCALE_ROUTE_NAME_SUFFIX = \"default\";\nconst DEFAULT_DETECTION_DIRECTION = \"ltr\";\nconst DEFAULT_BASE_URL = \"\";\nconst DEFAULT_DYNAMIC_PARAMS_KEY = \"\";\n/*!\n  * shared v9.4.1\n  * (c) 2023 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nconst makeSymbol = (name, shareable = false) => !shareable ? Symbol(name) : Symbol.for(name);\nconst assign = Object.assign;\nconst isArray = Array.isArray;\nconst isFunction = (val) => typeof val === \"function\";\nconst isString = (val) => typeof val === \"string\";\nconst isSymbol = (val) => typeof val === \"symbol\";\nconst isObject = (val) => val !== null && typeof val === \"object\";\nconst PLUS_RE = /\\+/g;\nfunction decode(text = \"\") {\n  try {\n    return decodeURIComponent(\"\" + text);\n  } catch {\n    return \"\" + text;\n  }\n}\nfunction decodeQueryKey(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction decodeQueryValue(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction parseQuery(parametersString = \"\") {\n  const object = {};\n  if (parametersString[0] === \"?\") {\n    parametersString = parametersString.slice(1);\n  }\n  for (const parameter of parametersString.split(\"&\")) {\n    const s = parameter.match(/([^=]+)=?(.*)/) || [];\n    if (s.length < 2) {\n      continue;\n    }\n    const key = decodeQueryKey(s[1]);\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = decodeQueryValue(s[2] || \"\");\n    if (object[key] === void 0) {\n      object[key] = value;\n    } else if (Array.isArray(object[key])) {\n      object[key].push(value);\n    } else {\n      object[key] = [object[key], value];\n    }\n  }\n  return object;\n}\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?/;\nfunction hasTrailingSlash(input = \"\", queryParameters = false) {\n  if (!queryParameters) {\n    return input.endsWith(\"/\");\n  }\n  return TRAILING_SLASH_RE.test(input);\n}\nfunction withoutTrailingSlash(input = \"\", queryParameters = false) {\n  if (!queryParameters) {\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\n  }\n  if (!hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  const [s0, ...s] = input.split(\"?\");\n  return (s0.slice(0, -1) || \"/\") + (s.length > 0 ? `?${s.join(\"?\")}` : \"\");\n}\nfunction withTrailingSlash(input = \"\", queryParameters = false) {\n  if (!queryParameters) {\n    return input.endsWith(\"/\") ? input : input + \"/\";\n  }\n  if (hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  const [s0, ...s] = input.split(\"?\");\n  return s0 + \"/\" + (s.length > 0 ? `?${s.join(\"?\")}` : \"\");\n}\nfunction parsePath(input = \"\") {\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\n  return {\n    pathname,\n    search,\n    hash\n  };\n}\nconst inBrowser = typeof window !== \"undefined\";\nfunction warn(msg, err) {\n  if (typeof console !== \"undefined\") {\n    console.warn(`[vue-i18n-routing] ` + msg);\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\nfunction getNormalizedLocales(locales) {\n  locales = locales || [];\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n    } else {\n      normalized.push(locale);\n    }\n  }\n  return normalized;\n}\nfunction isI18nInstance(i18n) {\n  return i18n != null && \"global\" in i18n && \"mode\" in i18n;\n}\nfunction isComposer(target) {\n  return target != null && !(\"__composer\" in target) && isRef(target.locale);\n}\nfunction isVueI18n(target) {\n  return target != null && \"__composer\" in target;\n}\nfunction isExportedGlobalComposer(target) {\n  return target != null && !(\"__composer\" in target) && !isRef(target.locale);\n}\nfunction isLegacyVueI18n(target) {\n  return target != null && (\"__VUE_I18N_BRIDGE__\" in target || \"_sync\" in target);\n}\nfunction getComposer(i18n) {\n  return isI18nInstance(i18n) ? isComposer(i18n.global) ? i18n.global : i18n.global.__composer : isVueI18n(i18n) ? i18n.__composer : i18n;\n}\nfunction getLocale(i18n) {\n  const target = isI18nInstance(i18n) ? i18n.global : i18n;\n  return isComposer(target) ? isVue2 && isLegacyVueI18n(i18n) ? i18n.locale : target.locale.value : isExportedGlobalComposer(target) || isVueI18n(target) || isLegacyVueI18n(target) ? target.locale : target.locale;\n}\nfunction getLocales(i18n) {\n  const target = isI18nInstance(i18n) ? i18n.global : i18n;\n  return isComposer(target) ? isVue2 && isLegacyVueI18n(i18n) ? i18n.locales : target.locales.value : isExportedGlobalComposer(target) || isVueI18n(target) || isLegacyVueI18n(target) ? target.locales : target.locales;\n}\nfunction getLocaleCodes(i18n) {\n  const target = isI18nInstance(i18n) ? i18n.global : i18n;\n  return isComposer(target) ? isVue2 && isLegacyVueI18n(i18n) ? i18n.localeCodes : target.localeCodes.value : isExportedGlobalComposer(target) || isVueI18n(target) || isLegacyVueI18n(target) ? target.localeCodes : target.localeCodes;\n}\nfunction setLocale(i18n, locale) {\n  const target = isI18nInstance(i18n) ? i18n.global : i18n;\n  if (isComposer(target)) {\n    if (isVue2 && isLegacyVueI18n(i18n)) {\n      i18n.locale = locale;\n    } else {\n      target.locale.value = locale;\n    }\n  } else if (isExportedGlobalComposer(target) || isVueI18n(target) || isLegacyVueI18n(target)) {\n    target.locale = locale;\n  } else {\n    throw new Error(\"TODO:\");\n  }\n}\nfunction adjustRoutePathForTrailingSlash(pagePath, trailingSlash, isChildWithRelativePath) {\n  return pagePath.replace(/\\/+$/, \"\") + (trailingSlash ? \"/\" : \"\") || (isChildWithRelativePath ? \"\" : \"/\");\n}\nfunction toRawRoute(maybeRoute) {\n  return isVueRouter4 ? isRef(maybeRoute) ? maybeRoute.value : maybeRoute : isRef(maybeRoute) ? maybeRoute.value : maybeRoute;\n}\nfunction getRouteName(routeName) {\n  return isString(routeName) ? routeName : isSymbol(routeName) ? routeName.toString() : \"(null)\";\n}\nfunction getLocaleRouteName(routeName, locale, {\n  defaultLocale,\n  strategy,\n  routesNameSeparator,\n  defaultLocaleRouteNameSuffix\n}) {\n  let name = getRouteName(routeName) + (strategy === \"no_prefix\" ? \"\" : routesNameSeparator + locale);\n  if (locale === defaultLocale && strategy === \"prefix_and_default\") {\n    name += routesNameSeparator + defaultLocaleRouteNameSuffix;\n  }\n  return name;\n}\nfunction resolveBaseUrl(baseUrl, context) {\n  if (isFunction(baseUrl)) {\n    return baseUrl(context);\n  }\n  return baseUrl;\n}\nfunction matchBrowserLocale(locales, browserLocales) {\n  const matchedLocales = [];\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const matchedLocale = locales.find((l) => l.iso.toLowerCase() === browserCode.toLowerCase());\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 1 - index / browserLocales.length });\n      break;\n    }\n  }\n  for (const [index, browserCode] of browserLocales.entries()) {\n    const languageCode = browserCode.split(\"-\")[0].toLowerCase();\n    const matchedLocale = locales.find((l) => l.iso.split(\"-\")[0].toLowerCase() === languageCode);\n    if (matchedLocale) {\n      matchedLocales.push({ code: matchedLocale.code, score: 0.999 - index / browserLocales.length });\n      break;\n    }\n  }\n  return matchedLocales;\n}\nconst DefaultBrowserLocaleMatcher = matchBrowserLocale;\nfunction compareBrowserLocale(a, b) {\n  if (a.score === b.score) {\n    return b.code.length - a.code.length;\n  }\n  return b.score - a.score;\n}\nconst DefaultBrowerLocaleComparer = compareBrowserLocale;\nfunction findBrowserLocale(locales, browserLocales, { matcher = DefaultBrowserLocaleMatcher, comparer = DefaultBrowerLocaleComparer } = {}) {\n  const normalizedLocales = [];\n  for (const l of locales) {\n    const { code } = l;\n    const iso = l.iso || code;\n    normalizedLocales.push({ code, iso });\n  }\n  const matchedLocales = matcher(normalizedLocales, browserLocales);\n  if (matchedLocales.length > 1) {\n    matchedLocales.sort(comparer);\n  }\n  return matchedLocales.length ? matchedLocales[0].code : \"\";\n}\nfunction prefixable$1(optons) {\n  const { currentLocale, defaultLocale, strategy, isChild, path } = optons;\n  const isDefaultLocale = currentLocale === defaultLocale;\n  const isChildWithRelativePath = isChild && !path.startsWith(\"/\");\n  return !isChildWithRelativePath && // skip default locale if strategy is 'prefix_except_default'\n  !(isDefaultLocale && strategy === \"prefix_except_default\");\n}\nconst DefaultLocalizeRoutesPrefixable = prefixable$1;\nfunction localizeRoutes(routes, {\n  defaultLocale = DEFAULT_LOCALE,\n  strategy = DEFAULT_STRATEGY,\n  trailingSlash = DEFAULT_TRAILING_SLASH,\n  routesNameSeparator = DEFAULT_ROUTES_NAME_SEPARATOR,\n  defaultLocaleRouteNameSuffix = DEFAULT_LOCALE_ROUTE_NAME_SUFFIX,\n  includeUprefixedFallback = false,\n  optionsResolver = void 0,\n  localizeRoutesPrefixable = DefaultLocalizeRoutesPrefixable,\n  locales = []\n} = {}) {\n  if (strategy === \"no_prefix\") {\n    return routes;\n  }\n  const _localeCodes = locales.map((locale) => isString(locale) ? locale : locale.code);\n  function makeLocalizedRoutes(route, allowedLocaleCodes, isChild = false, isExtraPageTree = false) {\n    if (route.redirect && (!route.component || !route.file)) {\n      return [route];\n    }\n    let routeOptions = null;\n    if (optionsResolver != null) {\n      routeOptions = optionsResolver(route, allowedLocaleCodes);\n      if (routeOptions == null) {\n        return [route];\n      }\n    }\n    const componentOptions = {\n      locales: _localeCodes,\n      paths: {}\n    };\n    if (routeOptions != null) {\n      assign(componentOptions, routeOptions);\n    }\n    assign(componentOptions, { locales: allowedLocaleCodes });\n    if (componentOptions.locales.length > 0 && routeOptions && routeOptions.locales != null && routeOptions.locales.length > 0) {\n      const filteredLocales = [];\n      for (const locale of componentOptions.locales) {\n        if (routeOptions.locales.includes(locale)) {\n          filteredLocales.push(locale);\n        }\n      }\n      componentOptions.locales = filteredLocales;\n    }\n    return componentOptions.locales.reduce((_routes, locale) => {\n      const { name } = route;\n      let { path } = route;\n      const localizedRoute = { ...route };\n      if (name) {\n        localizedRoute.name = `${name}${routesNameSeparator}${locale}`;\n      }\n      if (route.children) {\n        localizedRoute.children = route.children.reduce(\n          (children, child) => [...children, ...makeLocalizedRoutes(child, [locale], true, isExtraPageTree)],\n          []\n        );\n      }\n      if (componentOptions.paths && componentOptions.paths[locale]) {\n        path = componentOptions.paths[locale];\n      }\n      const isDefaultLocale = locale === defaultLocale;\n      if (isDefaultLocale && strategy === \"prefix_and_default\") {\n        if (!isChild) {\n          const defaultRoute = { ...localizedRoute, path };\n          if (name) {\n            defaultRoute.name = `${localizedRoute.name}${routesNameSeparator}${defaultLocaleRouteNameSuffix}`;\n          }\n          if (route.children) {\n            defaultRoute.children = [];\n            for (const childRoute of route.children) {\n              defaultRoute.children = defaultRoute.children.concat(\n                makeLocalizedRoutes(childRoute, [locale], true, true)\n              );\n            }\n          }\n          _routes.push(defaultRoute);\n        } else if (isChild && isExtraPageTree && name) {\n          localizedRoute.name += `${routesNameSeparator}${defaultLocaleRouteNameSuffix}`;\n        }\n      }\n      const isChildWithRelativePath = isChild && !path.startsWith(\"/\");\n      const shouldAddPrefix = localizeRoutesPrefixable({\n        isChild,\n        path,\n        currentLocale: locale,\n        defaultLocale,\n        strategy\n      });\n      if (shouldAddPrefix) {\n        path = `/${locale}${path}`;\n      }\n      if (path) {\n        path = adjustRoutePathForTrailingSlash(path, trailingSlash, isChildWithRelativePath);\n      }\n      if (shouldAddPrefix && isDefaultLocale && strategy === \"prefix\" && includeUprefixedFallback) {\n        _routes.push({ ...route });\n      }\n      localizedRoute.path = path;\n      _routes.push(localizedRoute);\n      return _routes;\n    }, []);\n  }\n  return routes.reduce(\n    (localized, route) => [...localized, ...makeLocalizedRoutes(route, _localeCodes || [])],\n    []\n  );\n}\nfunction proxyVueInstance(target) {\n  return function() {\n    return Reflect.apply(\n      target,\n      {\n        getRouteBaseName: this.getRouteBaseName,\n        localePath: this.localePath,\n        localeRoute: this.localeRoute,\n        localeLocation: this.localeLocation,\n        resolveRoute: this.resolveRoute,\n        switchLocalePath: this.switchLocalePath,\n        localeHead: this.localeHead,\n        i18n: this.$i18n,\n        route: this.$route,\n        router: this.$router\n      },\n      // eslint-disable-next-line prefer-rest-params\n      arguments\n    );\n  };\n}\nfunction extendI18n(i18n, {\n  locales = [],\n  localeCodes = [],\n  baseUrl = DEFAULT_BASE_URL,\n  hooks = {},\n  context = {}\n} = {}) {\n  const scope = effectScope();\n  const orgInstall = i18n.install;\n  i18n.install = (vue, ...options) => {\n    const pluginOptions = isPluginOptions(options[0]) ? assign({}, options[0]) : { inject: true };\n    if (pluginOptions.inject == null) {\n      pluginOptions.inject = true;\n    }\n    const orgComposerExtend = pluginOptions.__composerExtend;\n    pluginOptions.__composerExtend = (localComposer) => {\n      const globalComposer2 = getComposer(i18n);\n      localComposer.locales = computed(() => globalComposer2.locales.value);\n      localComposer.localeCodes = computed(() => globalComposer2.localeCodes.value);\n      localComposer.baseUrl = computed(() => globalComposer2.baseUrl.value);\n      let orgComposerDispose;\n      if (isFunction(orgComposerExtend)) {\n        orgComposerDispose = Reflect.apply(orgComposerExtend, pluginOptions, [localComposer]);\n      }\n      return () => {\n        orgComposerDispose && orgComposerDispose();\n      };\n    };\n    if (i18n.mode === \"legacy\") {\n      const orgVueI18nExtend = pluginOptions.__vueI18nExtend;\n      pluginOptions.__vueI18nExtend = (vueI18n) => {\n        extendVueI18n(vueI18n, hooks.onExtendVueI18n);\n        let orgVueI18nDispose;\n        if (isFunction(orgVueI18nExtend)) {\n          orgVueI18nDispose = Reflect.apply(orgVueI18nExtend, pluginOptions, [vueI18n]);\n        }\n        return () => {\n          orgVueI18nDispose && orgVueI18nDispose();\n        };\n      };\n    }\n    options[0] = pluginOptions;\n    Reflect.apply(orgInstall, i18n, [vue, ...options]);\n    const globalComposer = getComposer(i18n);\n    scope.run(() => {\n      extendComposer(globalComposer, { locales, localeCodes, baseUrl, hooks, context });\n      if (i18n.mode === \"legacy\" && isVueI18n(i18n.global)) {\n        extendVueI18n(i18n.global, hooks.onExtendVueI18n);\n      }\n    });\n    const app = vue;\n    const exported = i18n.mode === \"composition\" ? isVue3 ? app.config.globalProperties.$i18n : i18n : isVue2 ? i18n : null;\n    if (exported) {\n      extendExportedGlobal(exported, globalComposer, hooks.onExtendExportedGlobal);\n    }\n    if (pluginOptions.inject) {\n      vue.mixin({\n        methods: {\n          resolveRoute: proxyVueInstance(resolveRoute),\n          localePath: proxyVueInstance(localePath),\n          localeRoute: proxyVueInstance(localeRoute),\n          localeLocation: proxyVueInstance(localeLocation),\n          switchLocalePath: proxyVueInstance(switchLocalePath),\n          getRouteBaseName: proxyVueInstance(getRouteBaseName),\n          localeHead: proxyVueInstance(localeHead)\n        }\n      });\n    }\n    if (app.unmount) {\n      const unmountApp = app.unmount;\n      app.unmount = () => {\n        scope.stop();\n        unmountApp();\n      };\n    }\n  };\n  return scope;\n}\nfunction extendComposer(composer, options) {\n  const { locales, localeCodes, baseUrl, context } = options;\n  const _locales = ref(locales);\n  const _localeCodes = ref(localeCodes);\n  const _baseUrl = ref(\"\");\n  composer.locales = computed(() => _locales.value);\n  composer.localeCodes = computed(() => _localeCodes.value);\n  composer.baseUrl = computed(() => _baseUrl.value);\n  if (inBrowser) {\n    watch(\n      composer.locale,\n      () => {\n        _baseUrl.value = resolveBaseUrl(baseUrl, context);\n      },\n      { immediate: true }\n    );\n  } else {\n    _baseUrl.value = resolveBaseUrl(baseUrl, context);\n  }\n  if (options.hooks && options.hooks.onExtendComposer) {\n    options.hooks.onExtendComposer(composer);\n  }\n}\nfunction extendProperyDescripters(composer, exported, hook) {\n  const properties = [\n    {\n      locales: {\n        get() {\n          return composer.locales.value;\n        }\n      },\n      localeCodes: {\n        get() {\n          return composer.localeCodes.value;\n        }\n      },\n      baseUrl: {\n        get() {\n          return composer.baseUrl.value;\n        }\n      }\n    }\n  ];\n  hook && properties.push(hook(composer));\n  for (const property of properties) {\n    for (const [key, descriptor] of Object.entries(property)) {\n      Object.defineProperty(exported, key, descriptor);\n    }\n  }\n}\nfunction extendExportedGlobal(exported, g, hook) {\n  extendProperyDescripters(g, exported, hook);\n}\nfunction extendVueI18n(vueI18n, hook) {\n  const c = getComposer(vueI18n);\n  extendProperyDescripters(c, vueI18n, hook);\n}\nfunction isPluginOptions(options) {\n  return isObject(options) && (\"inject\" in options || \"__composerExtend\" in options || \"__vueI18nExtend\" in options);\n}\nconst GlobalOptionsRegistory = makeSymbol(\"vue-i18n-routing-gor\");\nfunction registerGlobalOptions(router, options) {\n  const _options = router[GlobalOptionsRegistory];\n  if (_options) {\n    warn(\"already registered global options\");\n  } else {\n    router[GlobalOptionsRegistory] = options;\n  }\n}\nfunction getGlobalOptions(router) {\n  return router[GlobalOptionsRegistory] ?? {};\n}\nfunction createRouter(i18n, options = {}) {\n  const {\n    version,\n    defaultLocale,\n    locales,\n    strategy,\n    trailingSlash,\n    routesNameSeparator,\n    defaultLocaleRouteNameSuffix,\n    defaultDirection,\n    baseUrl,\n    routes,\n    prefixable: prefixable2,\n    switchLocalePathIntercepter,\n    localizeRoutesPrefixable,\n    dynamicRouteParamsKey,\n    routeOptionsResolver: optionsResolver\n  } = asDefaultVueI18nRouterOptions(options);\n  const normalizedLocaleCodes = getNormalizedLocales(locales);\n  const localeCodes = normalizedLocaleCodes.map((l) => l.code);\n  const getLocaleFromRoute = createLocaleFromRouteGetter(localeCodes, routesNameSeparator, defaultLocaleRouteNameSuffix);\n  const localizedRoutes = localizeRoutes(routes, {\n    locales,\n    defaultLocale,\n    strategy,\n    trailingSlash,\n    routesNameSeparator,\n    defaultLocaleRouteNameSuffix,\n    localizeRoutesPrefixable,\n    optionsResolver\n  });\n  options.routes = localizedRoutes;\n  const router = createVueRouter(options, version);\n  registerGlobalOptions(router, {\n    defaultLocale,\n    localeCodes,\n    strategy,\n    trailingSlash,\n    routesNameSeparator,\n    defaultLocaleRouteNameSuffix,\n    defaultDirection,\n    prefixable: prefixable2,\n    switchLocalePathIntercepter,\n    dynamicRouteParamsKey\n  });\n  extendI18n(i18n, { locales: normalizedLocaleCodes, baseUrl, localeCodes, context: router });\n  router.beforeEach((to, from, next) => {\n    const currentLocale = getLocale(i18n);\n    const finalLocale = getLocaleFromRoute(to) || currentLocale || defaultLocale || \"\";\n    if (currentLocale !== finalLocale) {\n      setLocale(i18n, finalLocale);\n    }\n    next();\n  });\n  return router;\n}\nfunction createVueRouter(options, version) {\n  if (isVue3 && version === 4) {\n    return createRouter$1(options);\n  } else if (isVue2 && version === 3) {\n    return new VueRouter3(options);\n  } else {\n    throw new Error(\"TODO:\");\n  }\n}\nfunction getLocalesRegex(localeCodes) {\n  return new RegExp(`^/(${localeCodes.join(\"|\")})(?:/|$)`, \"i\");\n}\nfunction createLocaleFromRouteGetter(localeCodes, routesNameSeparator, defaultLocaleRouteNameSuffix) {\n  const localesPattern = `(${localeCodes.join(\"|\")})`;\n  const defaultSuffixPattern = `(?:${routesNameSeparator}${defaultLocaleRouteNameSuffix})?`;\n  const regexpName = new RegExp(`${routesNameSeparator}${localesPattern}${defaultSuffixPattern}$`, \"i\");\n  const regexpPath = getLocalesRegex(localeCodes);\n  const getLocaleFromRoute = (route) => {\n    if (isObject(route)) {\n      if (route.name) {\n        const name = isString(route.name) ? route.name : route.name.toString();\n        const matches = name.match(regexpName);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      } else if (route.path) {\n        const matches = route.path.match(regexpPath);\n        if (matches && matches.length > 1) {\n          return matches[1];\n        }\n      }\n    } else if (isString(route)) {\n      const matches = route.match(regexpPath);\n      if (matches && matches.length > 1) {\n        return matches[1];\n      }\n    }\n    return \"\";\n  };\n  return getLocaleFromRoute;\n}\nfunction asDefaultVueI18nRouterOptions(options) {\n  options.version = options.version ?? 4;\n  options.defaultLocale = options.defaultLocale ?? DEFAULT_LOCALE;\n  options.strategy = options.strategy ?? DEFAULT_STRATEGY;\n  options.trailingSlash = options.trailingSlash ?? DEFAULT_TRAILING_SLASH;\n  options.routesNameSeparator = options.routesNameSeparator ?? DEFAULT_ROUTES_NAME_SEPARATOR;\n  options.defaultLocaleRouteNameSuffix = options.defaultLocaleRouteNameSuffix ?? DEFAULT_LOCALE_ROUTE_NAME_SUFFIX;\n  options.locales = options.locales ?? [];\n  options.defaultDirection = options.defaultDirection ?? DEFAULT_DETECTION_DIRECTION;\n  options.baseUrl = options.baseUrl ?? DEFAULT_BASE_URL;\n  options.routes = options.routes ?? [];\n  options.prefixable = options.prefixable ?? DefaultPrefixable;\n  options.switchLocalePathIntercepter = options.switchLocalePathIntercepter ?? DefaultSwitchLocalePathIntercepter;\n  options.localizeRoutesPrefixable = options.localizeRoutesPrefixable ?? DefaultLocalizeRoutesPrefixable;\n  options.dynamicRouteParamsKey = options.dynamicRouteParamsKey ?? DEFAULT_DYNAMIC_PARAMS_KEY;\n  return options;\n}\nfunction getI18nRoutingOptions(router, proxy, {\n  defaultLocale = DEFAULT_LOCALE,\n  defaultDirection = DEFAULT_DETECTION_DIRECTION,\n  defaultLocaleRouteNameSuffix = DEFAULT_LOCALE_ROUTE_NAME_SUFFIX,\n  routesNameSeparator = DEFAULT_ROUTES_NAME_SEPARATOR,\n  strategy = DEFAULT_STRATEGY,\n  trailingSlash = DEFAULT_TRAILING_SLASH,\n  localeCodes = [],\n  prefixable: prefixable2 = DefaultPrefixable,\n  switchLocalePathIntercepter = DefaultSwitchLocalePathIntercepter,\n  dynamicRouteParamsKey = DEFAULT_DYNAMIC_PARAMS_KEY\n} = {}) {\n  const options = getGlobalOptions(router);\n  return {\n    defaultLocale: proxy.defaultLocale || options.defaultLocale || defaultLocale,\n    defaultDirection: proxy.defaultDirection || options.defaultDirection || defaultDirection,\n    defaultLocaleRouteNameSuffix: proxy.defaultLocaleRouteNameSuffix || options.defaultLocaleRouteNameSuffix || defaultLocaleRouteNameSuffix,\n    routesNameSeparator: proxy.routesNameSeparator || options.routesNameSeparator || routesNameSeparator,\n    strategy: proxy.strategy || options.strategy || strategy,\n    trailingSlash: proxy.trailingSlash || options.trailingSlash || trailingSlash,\n    localeCodes: proxy.localeCodes || options.localeCodes || localeCodes,\n    prefixable: proxy.prefixable || options.prefixable || prefixable2,\n    switchLocalePathIntercepter: proxy.switchLocalePathIntercepter || options.switchLocalePathIntercepter || switchLocalePathIntercepter,\n    dynamicRouteParamsKey: proxy.dynamicRouteParamsKey || options.dynamicRouteParamsKey || dynamicRouteParamsKey,\n    dynamicParamsInterceptor: options.dynamicParamsInterceptor || void 0\n  };\n}\nfunction split(str, index) {\n  const result = [str.slice(0, index), str.slice(index)];\n  return result;\n}\nfunction routeToObject(route) {\n  const { fullPath, query, hash, name, path, params, meta, redirectedFrom, matched } = route;\n  return {\n    fullPath,\n    params,\n    query,\n    hash,\n    name,\n    path,\n    meta,\n    matched,\n    redirectedFrom\n  };\n}\nfunction isV4Route(val) {\n  return isVue3;\n}\nfunction isV4Router(val) {\n  return isVue3;\n}\nfunction resolve(router, route, strategy, locale) {\n  var _a, _b;\n  if (!isV4Router()) {\n    return router.resolve(route);\n  }\n  if (strategy !== \"prefix\") {\n    return router.resolve(route);\n  }\n  const [rootSlash, restPath] = split(route.path, 1);\n  const targetPath = `${rootSlash}${locale}${restPath === \"\" ? restPath : `/${restPath}`}`;\n  const _route = (_b = (_a = router.options) == null ? void 0 : _a.routes) == null ? void 0 : _b.find((r) => r.path === targetPath);\n  if (_route == null) {\n    return route;\n  }\n  const _resolvableRoute = assign({}, route, _route);\n  _resolvableRoute.path = targetPath;\n  return router.resolve(_resolvableRoute);\n}\nconst RESOLVED_PREFIXED = /* @__PURE__ */ new Set([\"prefix_and_default\", \"prefix_except_default\"]);\nfunction prefixable(optons) {\n  const { currentLocale, defaultLocale, strategy } = optons;\n  const isDefaultLocale = currentLocale === defaultLocale;\n  return !(isDefaultLocale && RESOLVED_PREFIXED.has(strategy)) && // no prefix for any language\n  !(strategy === \"no_prefix\");\n}\nconst DefaultPrefixable = prefixable;\nfunction getRouteBaseName(givenRoute) {\n  const router = this.router;\n  const { routesNameSeparator } = getI18nRoutingOptions(router, this);\n  const route = givenRoute != null ? isRef(givenRoute) ? unref(givenRoute) : givenRoute : this.route;\n  if (route == null || !route.name) {\n    return;\n  }\n  const name = getRouteName(route.name);\n  return name.split(routesNameSeparator)[0];\n}\nfunction localePath(route, locale) {\n  var _a;\n  const localizedRoute = resolveRoute.call(this, route, locale);\n  return localizedRoute == null ? \"\" : isV4Route() ? ((_a = localizedRoute.redirectedFrom) == null ? void 0 : _a.fullPath) || localizedRoute.fullPath : localizedRoute.route.redirectedFrom || localizedRoute.route.fullPath;\n}\nfunction localeRoute(route, locale) {\n  const resolved = resolveRoute.call(this, route, locale);\n  return resolved == null ? void 0 : isV4Route() ? resolved : resolved.route;\n}\nfunction localeLocation(route, locale) {\n  const resolved = resolveRoute.call(this, route, locale);\n  return resolved == null ? void 0 : isV4Route() ? resolved : resolved.location;\n}\nfunction resolveRoute(route, locale) {\n  const router = this.router;\n  const i18n = this.i18n;\n  const _locale = locale || getLocale(i18n);\n  const { routesNameSeparator, defaultLocale, defaultLocaleRouteNameSuffix, strategy, trailingSlash, prefixable: prefixable2 } = getI18nRoutingOptions(router, this);\n  let _route;\n  if (isString(route)) {\n    if (route[0] === \"/\") {\n      const { pathname: path, search, hash } = parsePath(route);\n      const query = parseQuery(search);\n      _route = { path, query, hash };\n    } else {\n      _route = { name: route };\n    }\n  } else {\n    _route = route;\n  }\n  let localizedRoute = assign({}, _route);\n  const isRouteLocationPathRaw = (val) => \"path\" in val && !!val.path && !(\"name\" in val);\n  if (isRouteLocationPathRaw(localizedRoute)) {\n    let _resolvedRoute = null;\n    try {\n      _resolvedRoute = resolve(router, localizedRoute, strategy, _locale);\n    } catch {\n    }\n    const resolvedRoute = isVue3 ? _resolvedRoute : _resolvedRoute.route;\n    const resolvedRouteName = getRouteBaseName.call(this, resolvedRoute);\n    if (isString(resolvedRouteName)) {\n      localizedRoute = {\n        name: getLocaleRouteName(resolvedRouteName, _locale, {\n          defaultLocale,\n          strategy,\n          routesNameSeparator,\n          defaultLocaleRouteNameSuffix\n        }),\n        params: resolvedRoute.params,\n        query: resolvedRoute.query,\n        hash: resolvedRoute.hash\n      };\n      if (isVue3) {\n        localizedRoute.state = resolvedRoute.state;\n      }\n    } else {\n      if (prefixable2({ currentLocale: _locale, defaultLocale, strategy })) {\n        localizedRoute.path = `/${_locale}${localizedRoute.path}`;\n      }\n      localizedRoute.path = trailingSlash ? withTrailingSlash(localizedRoute.path, true) : withoutTrailingSlash(localizedRoute.path, true);\n    }\n  } else {\n    if (!localizedRoute.name && !(\"path\" in localizedRoute)) {\n      localizedRoute.name = getRouteBaseName.call(this, this.route);\n    }\n    localizedRoute.name = getLocaleRouteName(localizedRoute.name, _locale, {\n      defaultLocale,\n      strategy,\n      routesNameSeparator,\n      defaultLocaleRouteNameSuffix\n    });\n    if (isVue2) {\n      const { params } = localizedRoute;\n      if (params && params[\"0\"] === void 0 && params.pathMatch) {\n        params[\"0\"] = params.pathMatch;\n      }\n    }\n  }\n  try {\n    const resolvedRoute = router.resolve(localizedRoute);\n    if (isV4Route(resolvedRoute) ? resolvedRoute.name : resolvedRoute.route.name) {\n      return resolvedRoute;\n    }\n    return router.resolve(route);\n  } catch (e) {\n    if (isVue2) {\n      return null;\n    }\n    if (isVue3 && typeof e === \"object\" && \"type\" in e && e.type === 1) {\n      return null;\n    }\n  }\n}\nconst DefaultSwitchLocalePathIntercepter = (path) => path;\nfunction getLocalizableMetaFromDynamicParams(route, key) {\n  const metaDefault = {};\n  if (key === DEFAULT_DYNAMIC_PARAMS_KEY) {\n    return metaDefault;\n  }\n  const meta = isVue3 ? route.meta : isRef(route) ? route.value.meta || metaDefault : route.meta || metaDefault;\n  if (isRef(meta)) {\n    return meta.value[key] || metaDefault;\n  } else {\n    return meta[key] || metaDefault;\n  }\n}\nfunction switchLocalePath(locale) {\n  var _a, _b;\n  const route = this.route;\n  const name = getRouteBaseName.call(this, route);\n  if (!name) {\n    return \"\";\n  }\n  const { switchLocalePathIntercepter, dynamicRouteParamsKey, dynamicParamsInterceptor } = getI18nRoutingOptions(\n    this.router,\n    this\n  );\n  const routeValue = isVue3 ? route : isRef(route) ? route.value : route;\n  const routeCopy = routeToObject(routeValue);\n  const langSwitchParamsIntercepted = (_b = (_a = dynamicParamsInterceptor == null ? void 0 : dynamicParamsInterceptor()) == null ? void 0 : _a.value) == null ? void 0 : _b[locale];\n  const langSwitchParams = getLocalizableMetaFromDynamicParams(route, dynamicRouteParamsKey)[locale] || {};\n  const resolvedParams = langSwitchParamsIntercepted ?? langSwitchParams ?? {};\n  const _baseRoute = {\n    name,\n    params: {\n      ...routeCopy.params,\n      ...resolvedParams\n    }\n  };\n  if (isVue2) {\n    _baseRoute.params[0] = routeCopy.params.pathMatch;\n  }\n  const baseRoute = assign({}, routeCopy, _baseRoute);\n  let path = localePath.call(this, baseRoute, locale);\n  path = switchLocalePathIntercepter(path, locale);\n  return path;\n}\nfunction localeHead({ addDirAttribute = false, addSeoAttributes = false, identifierAttribute = \"hid\" } = {}) {\n  const router = this.router;\n  const i18n = this.i18n;\n  const { defaultDirection } = getI18nRoutingOptions(router, this);\n  const metaObject = {\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  };\n  if (i18n.locales == null || i18n.baseUrl == null) {\n    return metaObject;\n  }\n  const locale = getLocale(i18n);\n  const locales = getLocales(i18n);\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || {\n    code: locale\n  };\n  const currentLocaleIso = currentLocale.iso;\n  const currentLocaleDir = currentLocale.dir || defaultDirection;\n  if (addDirAttribute) {\n    metaObject.htmlAttrs.dir = currentLocaleDir;\n  }\n  if (addSeoAttributes && locale && i18n.locales) {\n    if (currentLocaleIso) {\n      metaObject.htmlAttrs.lang = currentLocaleIso;\n    }\n    addHreflangLinks.call(this, locales, unref(i18n.baseUrl), metaObject.link, identifierAttribute);\n    addCanonicalLinksAndOgUrl.call(\n      this,\n      unref(i18n.baseUrl),\n      metaObject.link,\n      metaObject.meta,\n      identifierAttribute,\n      addSeoAttributes\n    );\n    addCurrentOgLocale(currentLocale, currentLocaleIso, metaObject.meta, identifierAttribute);\n    addAlternateOgLocales(locales, currentLocaleIso, metaObject.meta, identifierAttribute);\n  }\n  return metaObject;\n}\nfunction addHreflangLinks(locales, baseUrl, link, identifierAttribute) {\n  const router = this.router;\n  const { defaultLocale, strategy } = getI18nRoutingOptions(router, this);\n  if (strategy === STRATEGIES.NO_PREFIX) {\n    return;\n  }\n  const localeMap = /* @__PURE__ */ new Map();\n  for (const locale of locales) {\n    const localeIso = locale.iso;\n    if (!localeIso) {\n      warn(\"Locale ISO code is required to generate alternate link\");\n      continue;\n    }\n    const [language, region] = localeIso.split(\"-\");\n    if (language && region && (locale.isCatchallLocale || !localeMap.has(language))) {\n      localeMap.set(language, locale);\n    }\n    localeMap.set(localeIso, locale);\n  }\n  for (const [iso, mapLocale] of localeMap.entries()) {\n    const localePath2 = switchLocalePath.call(this, mapLocale.code);\n    if (localePath2) {\n      link.push({\n        [identifierAttribute]: `i18n-alt-${iso}`,\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath2, baseUrl),\n        hreflang: iso\n      });\n    }\n  }\n  if (defaultLocale) {\n    const localePath2 = switchLocalePath.call(this, defaultLocale);\n    if (localePath2) {\n      link.push({\n        [identifierAttribute]: \"i18n-xd\",\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath2, baseUrl),\n        hreflang: \"x-default\"\n      });\n    }\n  }\n}\nfunction addCanonicalLinksAndOgUrl(baseUrl, link, meta, identifierAttribute, seoAttributesOptions) {\n  const route = this.route;\n  const currentRoute = localeRoute.call(this, {\n    ...route,\n    // eslint-disable-line @typescript-eslint/no-explicit-any\n    name: getRouteBaseName.call(this, route)\n  });\n  if (currentRoute) {\n    let href = toAbsoluteUrl(currentRoute.path, baseUrl);\n    const canonicalQueries = isObject(seoAttributesOptions) && seoAttributesOptions.canonicalQueries || [];\n    if (canonicalQueries.length) {\n      const currentRouteQueryParams = currentRoute.query;\n      const params = new URLSearchParams();\n      for (const queryParamName of canonicalQueries) {\n        if (queryParamName in currentRouteQueryParams) {\n          const queryParamValue = currentRouteQueryParams[queryParamName];\n          if (isArray(queryParamValue)) {\n            queryParamValue.forEach((v) => params.append(queryParamName, v || \"\"));\n          } else {\n            params.append(queryParamName, queryParamValue || \"\");\n          }\n        }\n      }\n      const queryString = params.toString();\n      if (queryString) {\n        href = `${href}?${queryString}`;\n      }\n    }\n    link.push({\n      [identifierAttribute]: \"i18n-can\",\n      rel: \"canonical\",\n      href\n    });\n    meta.push({\n      [identifierAttribute]: \"i18n-og-url\",\n      property: \"og:url\",\n      content: href\n    });\n  }\n}\nfunction addCurrentOgLocale(currentLocale, currentLocaleIso, meta, identifierAttribute) {\n  const hasCurrentLocaleAndIso = currentLocale && currentLocaleIso;\n  if (!hasCurrentLocaleAndIso) {\n    return;\n  }\n  meta.push({\n    [identifierAttribute]: \"i18n-og\",\n    property: \"og:locale\",\n    // Replace dash with underscore as defined in spec: language_TERRITORY\n    content: hypenToUnderscore(currentLocaleIso)\n  });\n}\nfunction addAlternateOgLocales(locales, currentLocaleIso, meta, identifierAttribute) {\n  const localesWithoutCurrent = locales.filter((locale) => {\n    const localeIso = locale.iso;\n    return localeIso && localeIso !== currentLocaleIso;\n  });\n  if (localesWithoutCurrent.length) {\n    const alternateLocales = localesWithoutCurrent.map((locale) => ({\n      [identifierAttribute]: `i18n-og-alt-${locale.iso}`,\n      property: \"og:locale:alternate\",\n      content: hypenToUnderscore(locale.iso)\n    }));\n    meta.push(...alternateLocales);\n  }\n}\nfunction hypenToUnderscore(str) {\n  return (str || \"\").replace(/-/g, \"_\");\n}\nfunction toAbsoluteUrl(urlOrPath, baseUrl) {\n  if (urlOrPath.match(/^https?:\\/\\//)) {\n    return urlOrPath;\n  }\n  return baseUrl + urlOrPath;\n}\nfunction proxyForComposable(options, target) {\n  const {\n    router,\n    route,\n    i18n,\n    defaultLocale,\n    strategy,\n    defaultLocaleRouteNameSuffix,\n    trailingSlash,\n    routesNameSeparator\n  } = options;\n  return function(...args) {\n    return Reflect.apply(\n      target,\n      {\n        router,\n        route,\n        i18n,\n        defaultLocale,\n        strategy,\n        defaultLocaleRouteNameSuffix,\n        trailingSlash,\n        routesNameSeparator\n      },\n      args\n    );\n  };\n}\nfunction useRouteBaseName({\n  router = useRouter(),\n  route = useRoute(),\n  i18n = useI18n(),\n  defaultLocale = void 0,\n  defaultLocaleRouteNameSuffix = void 0,\n  routesNameSeparator = void 0,\n  strategy = void 0,\n  trailingSlash = void 0\n} = {}) {\n  return proxyForComposable(\n    { router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash },\n    getRouteBaseName\n  );\n}\nfunction useLocalePath({\n  router = useRouter(),\n  route = useRoute(),\n  i18n = useI18n(),\n  defaultLocale = void 0,\n  defaultLocaleRouteNameSuffix = void 0,\n  routesNameSeparator = void 0,\n  strategy = void 0,\n  trailingSlash = void 0\n} = {}) {\n  return proxyForComposable(\n    { router, route, i18n, defaultLocale, defaultLocaleRouteNameSuffix, routesNameSeparator, strategy, trailingSlash },\n    localePath\n  );\n}\nfunction useLocaleRoute({\n  router = useRouter(),\n  route = useRoute(),\n  i18n = useI18n(),\n  defaultLocale = void 0,\n  defaultLocaleRouteNameSuffix = void 0,\n  routesNameSeparator = void 0,\n  strategy = void 0,\n  trailingSlash = void 0\n} = {}) {\n  return proxyForComposable(\n    {\n      router,\n      route,\n      i18n,\n      defaultLocale,\n      defaultLocaleRouteNameSuffix,\n      routesNameSeparator,\n      strategy,\n      trailingSlash\n    },\n    localeRoute\n  );\n}\nfunction useLocaleLocation({\n  router = useRouter(),\n  route = useRoute(),\n  i18n = useI18n(),\n  defaultLocale = void 0,\n  defaultLocaleRouteNameSuffix = void 0,\n  routesNameSeparator = void 0,\n  strategy = void 0,\n  trailingSlash = void 0\n} = {}) {\n  return proxyForComposable(\n    {\n      router,\n      route,\n      i18n,\n      defaultLocale,\n      defaultLocaleRouteNameSuffix,\n      routesNameSeparator,\n      strategy,\n      trailingSlash\n    },\n    localeLocation\n  );\n}\nfunction useSwitchLocalePath({\n  router = useRouter(),\n  route = useRoute(),\n  i18n = useI18n(),\n  defaultLocale = void 0,\n  defaultLocaleRouteNameSuffix = void 0,\n  routesNameSeparator = void 0,\n  strategy = void 0,\n  trailingSlash = void 0\n} = {}) {\n  return proxyForComposable(\n    {\n      router,\n      route,\n      i18n,\n      defaultLocale,\n      defaultLocaleRouteNameSuffix,\n      routesNameSeparator,\n      strategy,\n      trailingSlash\n    },\n    switchLocalePath\n  );\n}\nfunction useLocaleHead({\n  addDirAttribute = false,\n  addSeoAttributes = false,\n  identifierAttribute = \"hid\",\n  strategy = void 0,\n  defaultLocale = void 0,\n  route = useRoute(),\n  router = useRouter(),\n  i18n = useI18n()\n} = {}) {\n  const _router = router;\n  const metaObject = ref({\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  });\n  function cleanMeta() {\n    metaObject.value = {\n      htmlAttrs: {},\n      link: [],\n      meta: []\n    };\n  }\n  function updateMeta(_route) {\n    metaObject.value = Reflect.apply(\n      localeHead,\n      {\n        router,\n        route: _route,\n        i18n,\n        defaultLocale,\n        strategy\n      },\n      [{ addDirAttribute, addSeoAttributes, identifierAttribute }]\n    );\n  }\n  if (inBrowser) {\n    if (isVue3) {\n      const stop = watchEffect(() => {\n        cleanMeta();\n        updateMeta(toRawRoute(_router.currentRoute));\n      });\n      onUnmounted(() => stop());\n    } else {\n      const handler = _router.afterEach(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        (to, from) => {\n          cleanMeta();\n          updateMeta(to);\n        }\n      );\n      onUnmounted(() => handler());\n      updateMeta(route);\n    }\n  } else {\n    updateMeta(toRawRoute(_router.currentRoute));\n  }\n  return metaObject;\n}\nconst VERSION = \"1.2.0\";\nexport {\n  DEFAULT_BASE_URL,\n  DEFAULT_DETECTION_DIRECTION,\n  DEFAULT_DYNAMIC_PARAMS_KEY,\n  DEFAULT_LOCALE,\n  DEFAULT_LOCALE_ROUTE_NAME_SUFFIX,\n  DEFAULT_ROUTES_NAME_SEPARATOR,\n  DEFAULT_STRATEGY,\n  DEFAULT_TRAILING_SLASH,\n  DefaultLocalizeRoutesPrefixable,\n  DefaultPrefixable,\n  DefaultSwitchLocalePathIntercepter,\n  STRATEGIES,\n  VERSION,\n  createLocaleFromRouteGetter,\n  createRouter,\n  extendI18n,\n  findBrowserLocale,\n  getComposer,\n  getGlobalOptions,\n  getLocale,\n  getLocaleCodes,\n  getLocales,\n  getLocalesRegex,\n  getRouteBaseName,\n  isComposer,\n  isExportedGlobalComposer,\n  isI18nInstance,\n  isLegacyVueI18n,\n  isVueI18n,\n  localeHead,\n  localeLocation,\n  localePath,\n  localeRoute,\n  localizeRoutes,\n  proxyVueInstance,\n  registerGlobalOptions,\n  resolveBaseUrl,\n  resolveRoute,\n  setLocale,\n  switchLocalePath,\n  useLocaleHead,\n  useLocaleLocation,\n  useLocalePath,\n  useLocaleRoute,\n  useRouteBaseName,\n  useSwitchLocalePath\n};\n",
      "start": 1727667729187,
      "end": 1727667729286,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1727667729286,
      "end": 1727667729286,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727667729286,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727667729287,
      "end": 1727667729287,
      "order": "normal"
    }
  ]
}
